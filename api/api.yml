openapi: 3.0.3
info:
  title: CMS
  version: "0.1"
tags:
  - name: auth
    description: Tout ce qui est lié à l'authentification
  - name: users
    description: Tout ce qui est lié à la gestion de compte
  - name: posts
    description: Tout ce qui est lié à la gestion des articles
  - name: comments
    description: Tout ce qui est lié à la gestion des commentaires sur les articles
  - name: tags
    description: Tout ce qui est lié à la gestion des catégories des articles

security:
  - BearerAuth: []
paths:
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Se connecter à son compte
      description: Se connecter à son compte avec l'email et le mot de passe
      security: []
      operationId: loginUser
      requestBody:
        description: Se connecter à son compte avec email et mot de passe
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "200":
          description: Connexion réussie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Informations invalides (email ou mot de passe)
        "404":
          description: Utilisateur non trouvé
        "422":
          description: Erreur de validation
  /api/auth/logout:
    post:
      tags:
        - auth
      summary: Se décconnecter
      description: Se connecter de son compte
      operationId: logoutUser
      responses:
        "200":
          description: Déconnexion réussie
        "400":
          description: Informations invalides (email ou mot de passe)
        "404":
          description: Utilisateur non trouvé
        "422":
          description: Erreur de validation

  /api/users:
    post:
      summary: Créer un compte utilisateur
      description: Créer un compte utilisateur avec un email, un mot de passe, et une photo de profil
      tags:
        - users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: First name of the user.
                  minLength: 2
                  maxLength: 50
                lastname:
                  type: string
                  description: Last name of the user.
                  minLength: 2
                  maxLength: 50
                username:
                  type: string
                  description: Unique username for the user.
                  minLength: 3
                  maxLength: 30
                email:
                  type: string
                  format: email
                  description: Valid email address of the user.
                password:
                  type: string
                  description: User's password.
                  minLength: 6
                tags:
                  type: array
                  items:
                    type: number
                  description: List of tags or preferences.
                  minItems: 1
                Picture:
                  type: string
                  format: binary
                  description: URL for the user's profile picture (optional).
                  nullable: true
              required:
                - firstname
                - lastname
                - username
                - email
                - password
                - tags
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique identifier for the created user.
                  message:
                    type: string
                    description: Success message.
        "400":
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message describing what went wrong.
        "500":
          description: Internal server error

  /api/users/{userId}:
    put:
      tags:
        - users
      summary: Mettre à jour ses informations
      description: Mettre à jour les informations de l'utilisateur en utilisant l'ID dans l'URL
      operationId: updateUser
      requestBody:
        description: Mettre à jour les informations de l'utilisateur
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
        required: true
      responses:
        "200":
          description: Utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Informations invalides
        "404":
          description: Utilisateur non trouvé
        "422":
          description: Erreur de validation

    patch:
      tags:
        - users
      summary: Modifier l'état du compte d'un utilisateur
      description: Modifier l'état du compte d'un utilisateurr par son ID. NB Seul un administrateur peut modifier l'état du compte d'un utilisateur
      operationId: changeUserState
      security:
        - BearerAuth: [admin]
      parameters:
        - name: userId
          in: path
          description: ID de l'utilisateur
          required: true
          schema:
            type: integer
      requestBody:
        description: Se connecter à son compte avec email et mot de passe
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: "#/components/schemas/UserAccountState"
              required:
                - email
                - password
                - status
      responses:
        "204":
          description: Utilisateur supprimé avec succès
        "404":
          description: Utilisateur non trouvé

  /api/posts:
    post:
      tags:
        - posts
      summary: Créer un nouvel article
      description: Créer un article en fournissant un titre et un contenu
      security: 
      - BearerAuth: []
      operationId: createPost
      requestBody:
        description: Créer un nouvel article
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Titre de l'article
                content:
                  type: string
                  description: Contenu de l'article
                Picture:
                  type: string
                  format: binary
                  description: Image associée à l'article (facultatif)
                  nullable: true
                tags:
                  type: array
                  items:
                    type: string
                  description: Liste des tags associés à l'article
      responses:
        "201":
          description: Article créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Requête invalide
        "422":
          description: Erreur de validation

    get:
      tags:
        - posts
      summary: Récupérer la liste des articles
      description: Récupérer la liste des articles filtrable par tags ou une chaine de recherche
      operationId: getPostsByTags
      parameters:
        - name: tags
          in: query
          description: Une list de tags pour filtrer les posts
          required: false
          schema:
            type: array
            items:
              type: string
        - name: query
          in: query
          description: une chaine de caractère pour filtrer les posts
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Liste des articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: Aucun article trouvé

  /api/posts/{postId}:
    get:
      tags:
        - posts
      summary: Récupérer un article spécifique
      description: Récupérer un article par son ID
      operationId: getPost
      parameters:
        - name: postId
          in: path
          description: ID de l'article à récupérer
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Article trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Article non trouvé

    patch:
      tags:
        - posts
      summary: Mettre à jour un article existant
      description: Mettre à jour un article existant
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          description: ID de l'article à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Mettre à jour un article existant
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        "200":
          description: Article mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Informations invalides
        "404":
          description: Article non trouvé
        "422":
          description: Erreur de validation

    delete:
      tags:
        - posts
      summary: Supprimer un article
      description: Supprimer un article par son ID
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: ID de l'article à supprimer
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Article supprimé avec succès
        "404":
          description: Article non trouvé

  /api/posts/{postId}/comments:
    get:
      tags:
        - comments
      summary: Obtenir les commentaires d'un article
      description: Récupérer les commentaires d'un article spécifique
      operationId: getComments
      parameters:
        - name: postId
          in: path
          description: ID de l'article
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Liste des commentaires récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "400":
          description: Paramètres de requête invalides
        "404":
          description: Ressource parente non trouvée
        "500":
          description: Erreur interne du serveur

  /api/comments:
    post:
      tags:
        - comments
      summary: Ajouter un commentaire à un article
      description: Ajouter un commentaire à un article en fournissant l'ID de l'article et le contenu du commentaire
      security:
        - BearerAuth: []
      requestBody:
        description: Créer un nouveau commentaire
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "201":
          description: Commentaire créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: ID du commentaire créé
                  postId:
                    type: integer
                    description: ID de l'article
                  content:
                    type: string
                    description: Contenu du commentaire
                  id_comment_parent:
                    type: integer
                    description: ID du commentaire parent (facultatif)
                    nullable: true
        "400":
          description: Requête invalide
        "500":
          description: Erreur interne du serveur
          
  /api/comments/{commentId}:
    put:
      tags:
        - comments
      summary: Mettre à jour un commentaire
      description: Mettre à jour un commentaire en spécifiant son ID dans l'URL
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          description: ID du commentaire à mettre à jour
          required: true
          schema:
            type: integer
      requestBody:
        description: Mettre à jour un commentaire existant
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
        required: true
      responses:
        "200":
          description: Commentaire mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          description: Commentaire invalide
        "404":
          description: Commentaire non trouvé
        "422":
          description: Erreur de validation

    delete:
      tags:
        - comments
      summary: Supprimer un commentaire
      description: Supprimer un commentaire en spécifiant son ID dans l'URL
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: ID du commentaire à supprimer
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Commentaire supprimé avec succès
        "404":
          description: Commentaire non trouvé

  /api/comments/{commentId}/replies:
    get:
      tags:
        - comments
      summary: Obtenir les réponses d'un commentaire
      description: Récupérer toutes les réponses associées à un commentaire spécifique
      operationId: getCommentReplies
      parameters:
        - name: commentId
          in: path
          description: ID du commentaire dont on veut obtenir les réponses
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Liste des réponses récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        "400":
          description: Paramètres de requête invalides
        "404":
          description: Commentaire non trouvé

  /api/tags:
    get:
      tags:
        - tags
      summary: Obtenir la liste des catégories
      description: Récupérer la liste de toutes les catégories disponibles
      operationId: getTags
      responses:
        "200":
          description: Liste des catégories récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        "404":
          description: Aucune catégorie trouvée

    post:
      tags:
        - tags
      summary: Ajouter une nouvelle catégorie
      description: Ajouter une nouvelle catégorie pour classer les articles
      operationId: createTag
      requestBody:
        description: Ajouter une catégorie
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
        required: true
      responses:
        "201":
          description: Catégorie ajoutée avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        "400":
          description: Catégorie invalide
        "422":
          description: Erreur de validation

  /api/tags/{tagId}:
    delete:
      tags:
        - tags
      summary: Supprimer une catégorie
      description: Supprimer une catégorie par son ID
      operationId: deleteTag
      parameters:
        - name: tagId
          in: path
          description: ID de la catégorie à supprimer
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Catégorie supprimée avec succès
        "404":
          description: Catégorie non trouvée

components:
  schemas:
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    UpdateUser:
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        picture:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        name:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        authorId:
          type: integer
        tags:
          type: array
          items:
            type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
        postId:
          type: integer
        content:
          type: string
        authorId:
          type: integer
    Tag:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    UserAccountState:
      type: string
      description: Le statut de l'article
      enum:
        - blocked
        - ative
        - archived
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
